# gui/plot_bh-curve_csv.py

#!/usr/bin/env python3

import os
import sys
import argparse
import csv
import numpy as np
import matplotlib.pyplot as plt

def load_bhcurve_csv(filename):
    metadata = {}
    runs = {}
    current_run = None
    Hs, Bs = [], []

    with open(filename, "r") as f:
        reader = csv.reader(f)
        for row in reader:
            if not row or row[0].startswith("#"):
                # Parse metadata
                line = ",".join(row)
                if "N," in line:
                    items = line.replace("#", "").split(",")
                    for i in range(0, len(items)-1, 2):
                        key, val = items[i].strip(), items[i+1].strip()
                        metadata[key] = val
                continue
            if len(row) < 4:
                continue
            run_index, time_iso, H, B = row
            run_index = int(run_index)
            H, B = float(H), float(B)
            # New run?
            if current_run is None:
                current_run = run_index
            if run_index != current_run:
                if current_run not in runs:
                    runs[current_run] = {"H":[], "B":[]}
                runs[current_run]["H"] = np.array(Hs)
                runs[current_run]["B"] = np.array(Bs)
                Hs, Bs = [], []
                current_run = run_index
            Hs.append(H)
            Bs.append(B)
        # Save last run
        if Hs and Bs:
            if current_run not in runs:
                runs[current_run] = {"H":[], "B":[]}
            runs[current_run]["H"] = np.array(Hs)
            runs[current_run]["B"] = np.array(Bs)
    return metadata, runs

def plot_bhcurve_runs(metadata, runs, runs_to_plot=None):
    plt.figure(figsize=(8, 6))
    colors = plt.cm.plasma(np.linspace(0, 1, len(runs)))
    for idx, (run_idx, data) in enumerate(runs.items()):
        if runs_to_plot and run_idx not in runs_to_plot:
            continue
        H = data["H"]
        B = data["B"]
        plt.plot(H, B, marker=".", lw=1, label=f"Run {run_idx}", color=colors[idx])
    plt.title("B-H Curves")
    plt.xlabel("H (A/m)")
    plt.ylabel("B (T)")
    plt.grid(True, which="both", alpha=0.2)
    meta_str = f'N={metadata.get("N")}, Ae={metadata.get("Ae (m²)")}, le={metadata.get("le (m)")}, Probe={metadata.get("Probe")} {metadata.get("0.1","")}'
    plt.suptitle(meta_str, fontsize=9, color="gray")
    #plt.legend()
    plt.tight_layout()
    plt.show()

def main():
    parser = argparse.ArgumentParser(
        description="""Plot BH-curve CSV logs (multi-run) as generated by MSO5000 Liveview.
        
        Example usage:
          python3 utils/plot_bhcurve_csv.py oszi_csv/bh-curve/bhcurve_log_20250807_111322.csv

        Optional:
          --list   : List runs/metadata only, do not plot
          --run N  : Only plot run number N (repeatable)
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("file", help="Path to BH-curve CSV file")
    parser.add_argument("--list", action="store_true", help="List available runs/metadata")
    parser.add_argument("--run", type=int, action="append", help="Plot only the specified run index (can repeat)")
    args = parser.parse_args()

    path = args.file
    if not os.path.isfile(path):
        print(f"❌ File not found: {path}")
        sys.exit(1)

    metadata, runs = load_bhcurve_csv(path)

    if args.list:
        print("BH-curve file:", path)
        print("Metadata:")
        for k, v in metadata.items():
            print(f"  {k}: {v}")
        print(f"Run indices: {sorted(runs.keys())}")
        sys.exit(0)

    runs_to_plot = args.run if args.run else None
    plot_bhcurve_runs(metadata, runs, runs_to_plot)

if __name__ == "__main__":
    main()
